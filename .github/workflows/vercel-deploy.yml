name: Vercel Deploy

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: vercel-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preview:
    name: Preview (PR)
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      HAS_VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN != '' || secrets.VERCEL_API_KEY != '' }}
      HAS_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID != '' }}
      VERCEL_TOKEN_EFFECTIVE: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_TOKEN || secrets.VERCEL_API_KEY }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      permissions:
        contents: read
        pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Vercel CLI
        if: ${{ env.HAS_VERCEL_TOKEN == 'true' && env.HAS_PROJECT_ID == 'true' }}
          run: |
            TOKEN="${{ secrets.VERCEL_TOKEN }}"
            if [ -z "$TOKEN" ]; then TOKEN="${{ secrets.VERCEL_API_KEY }}"; fi
            if [ -z "$TOKEN" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
              echo "Skipping Vercel Preview: missing secrets."
              exit 0
            fi
            npm i -g vercel@latest

      - name: Pull Vercel Project Settings (preview)
        if: ${{ env.HAS_VERCEL_TOKEN == 'true' && env.HAS_PROJECT_ID == 'true' }}
          run: |
            TOKEN="${{ secrets.VERCEL_TOKEN }}"
            if [ -z "$TOKEN" ]; then TOKEN="${{ secrets.VERCEL_API_KEY }}"; fi
            if [ -z "$TOKEN" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
              echo "Skipping Vercel Preview: missing secrets."
              exit 0
            fi
            vercel pull --yes --environment=preview --token "$TOKEN" --project "${{ secrets.VERCEL_PROJECT_ID }}"

      - name: Deploy to Vercel (preview)
        if: ${{ env.HAS_VERCEL_TOKEN == 'true' && env.HAS_PROJECT_ID == 'true' }}
        id: deploy
        run: |
          DEPLOY_URL=$(vercel deploy . --token "$VERCEL_TOKEN_EFFECTIVE" --project "$VERCEL_PROJECT_ID")
          echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
            TOKEN="${{ secrets.VERCEL_TOKEN }}"
            if [ -z "$TOKEN" ]; then TOKEN="${{ secrets.VERCEL_API_KEY }}"; fi
            if [ -z "$TOKEN" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
              echo "Skipping Vercel Preview: missing secrets."
              exit 0
            fi
            DEPLOY_URL=$(vercel deploy . --token "$TOKEN" --project "${{ secrets.VERCEL_PROJECT_ID }}")
            echo "url=$DEPLOY_URL" >> "$GITHUB_OUTPUT"

      - name: Comment Preview URL on PR
        if: ${{ steps.deploy.outputs.url != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const body = `ðŸš€ Preview Vercel: ${url}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

        - name: Skip info (always prints when prior steps skipped)
          run: echo "Preview job finished."

  production:
    env:
      HAS_VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN != '' || secrets.VERCEL_API_KEY != '' }}
      HAS_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID != '' }}
      VERCEL_TOKEN_EFFECTIVE: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_TOKEN || secrets.VERCEL_API_KEY }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    name: Production (main)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Vercel CLI
        if: ${{ env.HAS_VERCEL_TOKEN == 'true' && env.HAS_PROJECT_ID == 'true' }}
          run: |
            TOKEN="${{ secrets.VERCEL_TOKEN }}"
            if [ -z "$TOKEN" ]; then TOKEN="${{ secrets.VERCEL_API_KEY }}"; fi
            if [ -z "$TOKEN" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
              echo "Skipping Vercel Production: missing secrets."
              exit 0
            fi
            npm i -g vercel@latest

      - name: Pull Vercel Project Settings (production)
        if: ${{ env.HAS_VERCEL_TOKEN == 'true' && env.HAS_PROJECT_ID == 'true' }}
          run: |
            TOKEN="${{ secrets.VERCEL_TOKEN }}"
            if [ -z "$TOKEN" ]; then TOKEN="${{ secrets.VERCEL_API_KEY }}"; fi
            if [ -z "$TOKEN" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
              echo "Skipping Vercel Production: missing secrets."
              exit 0
            fi
            vercel pull --yes --environment=production --token "$TOKEN" --project "${{ secrets.VERCEL_PROJECT_ID }}"

      - name: Deploy to Vercel (production)
        if: ${{ env.HAS_VERCEL_TOKEN == 'true' && env.HAS_PROJECT_ID == 'true' }}
          run: |
            TOKEN="${{ secrets.VERCEL_TOKEN }}"
            if [ -z "$TOKEN" ]; then TOKEN="${{ secrets.VERCEL_API_KEY }}"; fi
            if [ -z "$TOKEN" ] || [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
              echo "Skipping Vercel Production: missing secrets."
              exit 0
            fi
            vercel deploy . --prod --token "$TOKEN" --project "${{ secrets.VERCEL_PROJECT_ID }}"

        - name: Skip info (always prints when prior steps skipped)
          run: echo "Production job finished."
